/**
 * SVG Loader - Carga SVG desde archivos externos y verifica SVG inline
 */

async function loadExternalSvgs() {
  const svgContainers = document.querySelectorAll("[data-svg]");

  console.log(
    `üé® Encontrados ${svgContainers.length} contenedores de SVG externos`
  );

  for (const container of svgContainers) {
    try {
      const svgPath = container.getAttribute("data-svg");
      const width = container.getAttribute("data-svg-width") || "24";
      const height = container.getAttribute("data-svg-height") || "24";
      const fallback = container.getAttribute("data-svg-fallback") || "üìä";

      console.log(`üì• Intentando cargar SVG: ${svgPath}`);

      // Obtener ruta base de la aplicaci√≥n
      const appPath = await window.api.getAppPath();
      console.log(`üìÅ App path: ${appPath}`);

      // Construir la ruta completa con normalizaci√≥n
      const fullPath = `${appPath}/${svgPath}`.replace(/\\/g, "/");
      console.log(`üìç Ruta completa: ${fullPath}`);

      // Intentar m√∫ltiples m√©todos de carga
      let svgContent = null;

      // M√©todo 1: Fetch con file://
      try {
        const fileUrl = `file:///${fullPath}`;
        console.log(`üîç Intentando fetch con: ${fileUrl}`);
        const response = await fetch(fileUrl);

        if (response.ok) {
          svgContent = await response.text();
          console.log(`‚úÖ SVG cargado con fetch`);
        } else {
          console.warn(`‚ö†Ô∏è Fetch fall√≥ con status: ${response.status}`);
        }
      } catch (fetchError) {
        console.warn(`‚ö†Ô∏è Fetch fall√≥:`, fetchError.message);
      }

      // Si tenemos contenido SVG, insertarlo
      if (svgContent) {
        container.innerHTML = svgContent;

        // Aplicar atributos
        const svgElement = container.querySelector("svg");
        if (svgElement) {
          svgElement.setAttribute("width", width);
          svgElement.setAttribute("height", height);
          svgElement.style.display = "inline-block";
          svgElement.style.verticalAlign = "middle";
        }

        console.log(`‚úÖ SVG insertado correctamente: ${svgPath}`);
      } else {
        // Usar fallback
        console.warn(`‚ö†Ô∏è Usando fallback para: ${svgPath}`);
        container.innerHTML = `<span style="font-size: ${height}px">${fallback}</span>`;
      }
    } catch (error) {
      console.error(`‚ùå Error general cargando SVG:`, error);
      const fallback = container.getAttribute("data-svg-fallback") || "üìä";
      const height = container.getAttribute("data-svg-height") || "24";
      container.innerHTML = `<span style="font-size: ${height}px">${fallback}</span>`;
    }
  }
}

document.addEventListener("DOMContentLoaded", async () => {
  console.log("üñºÔ∏è Inicializando cargador de SVG...");

  // Cargar SVG externos primero
  await loadExternalSvgs();

  // Luego verificar SVG inline
  const svgElements = document.querySelectorAll("svg");
  console.log(`üîç Encontrados ${svgElements.length} elementos SVG inline`);

  // Asegurar que los SVG inline sean visibles
  svgElements.forEach((svg, index) => {
    svg.style.display = "inline-block";
  });

  console.log("‚úÖ Cargador de SVG inicializado");
});
